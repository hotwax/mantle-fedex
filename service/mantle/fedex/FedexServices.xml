<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!--Default Authentication Service for Main services -->
        <!--Getting Fedex API Token by tokenId-->
        <service verb="set" noun="FedexApiToken">
            <out-parameters>
                <parameter name="fedexApiToken" required="true"/>
                <parameter name="tokenType" required="true"/>
                <parameter name="accountNumber" required="true"/>
            </out-parameters>
            <actions>

                <!--Searching wether the credentials are already available or not.-->
                <entity-find-one entity-name="FedexTokenDetails" value-field="apiTokenDetails">
                    <field-map field-name="tokenId" value="1"/>
                </entity-find-one>

                <!--Return if Details Not Present-->
                <if condition="apiTokenDetails==null">
                    <log message="===============Fedex Access Token Credentials not available.=============="/>
                    <return/>
                </if>

                <!--Hard Coded Url-->
                <log message="==============Get Service: API Found=============="/>
                <set field="connectUrl" value="https://apis-sandbox.fedex.com/oauth/token"/>

                <!--request Path has Context Type:"application/x-www-form-urlencoded"-->
                <set field="requestPath" value="grant_type=${apiTokenDetails.grantType}&amp;client_id=${apiTokenDetails.clientId}&amp;client_secret=${apiTokenDetails.clientSecret}"/>
                <log message="==============Details: ${apiTokenDetails.grantType}, ${apiTokenDetails.clientId},${apiTokenDetails.clientSecret}=============="/>
                <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;
                     def connectUrl=connectUrl;
                     RestClient restClient = ec.service.rest()
                     restClient.method("POST")
                     restClient.uri(connectUrl)
                     ec.logger.info("==========${connectUrl}==============")
                        ec.logger.info("==========${requestPath}==============")
                     restClient.contentType("application/x-www-form-urlencoded")
                     restClient.text(requestPath)
                     RestClient.RestResponse restResponse = restClient.call()
                     /*Checking Response Status Code is not verified yet*/
                     if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                        errMsgMap = (Map) new JsonSlurper().parseText(restResponse.text())
                        ec.logger.warn(restResponse.text())
                        return responseMap
                    }
                    /*Storing response of API in responseMap*/
                    responseMap = restResponse.jsonObject()
                 ]]>
                </script>

                <!--Returing fedexApiToken and tokenType-->
                <log message="==================${responseMap}=============="/>
                <set field="fedexApiToken" from="responseMap.access_token"/>
                <set field="tokenType" from="responseMap.token_type"/>
                <set field="accountNumber" from="apiTokenDetails.accountNumber"/>
            </actions>
        </service>

    <!--Default Authentication Service for Main services -->
        <!--Set/Generate new Fedex API Token-->
        <service verb="store" noun="FedexTokenDetails">
            <description>
                Test Credentials Are Predefined so this service is outdated.
            </description>
                 <in-parameters>
                <!--Adds grantType,clientId, clientSecret and accountNumber-->
                <auto-parameters entity-name="FedexTokenDetails" include="nonpk">
                        <exclude field-name="lastUpdatedStamp"/>
                    </auto-parameters>
                </in-parameters>
                <out-parameters>
                    <parameter name="tokenId"/>
                </out-parameters>

                <actions>

                    <entity-find-one entity-name="FedexTokenDetails" value-field="fedexTokenDetails">
                        <field-map field-name="tokenId" value="1"/>
                    </entity-find-one>

                <set field="tokenId" value="1"/>

                <!--Create new token/Update current token-->
                  <if condition="fedexTokenDetails==null">
                        <entity-make-value entity-name="FedexTokenDetails" value-field="fedexTokenDetails"/>
                        <set field="tokenId" value="1"/>
                        <set field="fedexTokenDetails.tokenId" from="tokenId"/>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <set field="fedexTokenDetails.accountNumber" from="accountNumber"/>
                        <entity-create value-field="fedexTokenDetails"/>
                    </if>
                    <else>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <set field="fedexTokenDetails.accountNumber" from="accountNumber"/>
                        <entity-update value-field="fedexTokenDetails"/>
                    </else>

                    <!--Store these values in table-->
                <log message="============${tokenId},${grantType},${clientId},${clientSecret},${accountNumber}=============="/>
            </actions>
        </service>

    <!--Validate Postal Address-->
    <service verb="validate" noun="PostalAddress">
        <description>Credentials are required for this service which can be added from
            mantle.fedex.FedexServices.store#FedexTokenDetails.
            Demo ContactMechId="Fedex_Contact_Ivan"
        </description>

        <in-parameters>
            <parameter name="contactMechId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" type="Map"/>
        </out-parameters>
        <actions>

            <service-call name="mantle.fedex.FedexServices.get#AddressMap" in-map='[contactMechId:contactMechId]' out-map='addressMap'/>
            <if condition="addressMap.validContactMechId==null"><return/></if>
            <set field="requestMap" from="addressMap.requestMap"/>
            <!--Hard Coded Url-->
            <set field="connectUrl" value="https://apis-sandbox.fedex.com/address/v1/addresses/resolve"/>

            <!--Returns fedexApiToken and tokenType-->
            <service-call name="mantle.fedex.FedexServices.set#FedexApiToken" out-map="fedexTokenDetails"/>

            <!--Check if Token Credentials Are added or not-->
            <if condition="fedexTokenDetails==null">
                <log message="=============Fedex Access Token Credentials
                                  not available.=============="/>
                <return/>
            </if>
            <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;

                     def connectUrl=connectUrl;
                     RestClient restClient = ec.service.rest()
                     restClient.method("POST")
                     restClient.uri(connectUrl)
                     restClient.contentType("application/json")
                     restClient.addHeader("Authorization", "${fedexTokenDetails.tokenType} ${fedexTokenDetails.fedexApiToken}")
                     restClient.addHeader("Content-Type", "application/json")
                     restClient.jsonObject(requestMap)
                     RestClient.RestResponse restResponse = restClient.call()

                     /*Checking Response Code is not verified yet*/
                     if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                        errMsgMap = (Map) new JsonSlurper().parseText(restResponse.text())
                        ec.logger.warn(restResponse.text())
                        return responseMap
                    }

                    /*Storing response of API in responseMap*/
                    responseMap = restResponse.jsonObject()
            ]]></script>
            <log message="==============${responseMap}=============="/>
        </actions>
    </service>

    <!--Return Address in form of Required Request Map-->
    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="contactMechId"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="validContactMechId"/>
            <parameter name="requestMap"/>
        </out-parameters>
        <actions>
            <!--Validating ContactMech Id-->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                <field-map field-name="contactMechId" from="contactMechId"/>
            </entity-find-one>
            <if condition="postalAddress==null">
                <log message="============Invalid Contact Mech ID=======" level="warn"/>
                <return/>
            </if>
            <!--Creating Request Map From given Postal Address-->
            <set field="adrs" from="streetLines:[postalAddress.address1],
                                        city:postalAddress.city,
                                        stateOrProvinceCode:postalAddress.stateProvinceGeoId,
                                        countryCode:postalAddress.countryGeoId,
                                        postalCode:postalAddress.postalCode" type="NewMap"/>
            <set field="requestMap" from="[addressesToValidate:[[address:adrs]]]" type="NewMap"/>
            <set field="validContactMechId" value="true"/>
            <log message="============Request Map: ${requestMap}=============="/>

        </actions>
    </service>
</services>