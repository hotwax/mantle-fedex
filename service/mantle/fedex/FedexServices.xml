<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!-- Testing OrderShippingRateService -->
    <service verb="check" noun="OrderShippingRateService">
        <in-parameters>
            <parameter name="shipmentId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderShippingRates"/>
        </out-parameters>
        <actions>
            <entity-find entity-name="mantle.order.OrderItem" list="itemInfoList">
                <econdition field-name="orderId"/>
                <econdition field-name="orderPartSeqId" ignore-if-empty="true"/>
                <econdition field-name="productId" operator="is-not-null"/>
            </entity-find>
            <service-call name="mantle.fedex.FedexServices.get#AutoPackageInfo" in-map="[itemInfoList:itemInfoList]"
                out-map="packageDetails"/>
            <set field="packageInfoList" from="packageDetails.packageInfoList"/>

            <service-call name="mantle.fedex.FedexServices.get#OrderShippingRate" in-map="context" out-map="context"/>
        </actions>
    </service>
    <service verb="get" noun="OrderShippingRate">
        <description>Remove accountNumber tag, it will be automatically added.</description>
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="orderId" required="true"/>
            <parameter name="orderPartSeqId" required="true"/>
            <parameter name="packageInfoList" type="List" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" required="true"/>
            <parameter name="shippingTotal">
                <description>Total cost of Shipment</description>
            </parameter>
            <parameter name="orderItemSeqId">
                <description>Return if an OrderItem record was created</description>
            </parameter>
            <parameter name="postalContactMechId">
                <description>Return if the destination address was validated and replaced</description>
            </parameter>
            <parameter name="orderShippingRates"/>
        </out-parameters>
        <actions>

            <!--Searching FedexApiToken-->
            <entity-find-one entity-name="ShippingGatewayOption" value-field="apiTokenOpt">
                    <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                    <field-map field-name="optionEnumId" value="FedexApiToken"/>
            </entity-find-one>
            <if condition="!apiTokenOpt.optionValue">
                <return type="warning"  message="Shipping gateway ${shippingGatewayConfigId} has no FedexApiToken, not getting rates"/>
            </if>

            <!-- Searching OrderPart -->
            <entity-find-one entity-name="mantle.order.OrderPart" value-field="orderPart">
                    <field-map field-name="orderId" from="orderId"/>
                    <field-map field-name="orderPartSeqId" from="orderPartSeqId"/>
            </entity-find-one>

            <!-- Extracting vendorPartyId and customerPartyId -->
            <set field="fromPartyId" from="orderPart.vendorPartyId"/>
            <if condition="!fromPartyId"><return message="Vendor party not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <set field="toPartyId" from="orderPart.customerPartyId"/>
            <if condition="!toPartyId"><return message="To party not set on order part ${orderId}:${orderPartSeqId}"/></if>

            <!-- Extracting carrierPartyId and shipmentMethodEnumId -->
            <set field="carrierPartyId" from="orderPart.carrierPartyId"/>
            <if condition="!carrierPartyId || carrierPartyId == '_NA_'">
                <return message="Carrier not set on order part ${orderId}:${orderPartSeqId}"/>
            </if>
            <set field="shipmentMethodEnumId" from="orderPart.shipmentMethodEnumId"/>
            <if condition="!shipmentMethodEnumId"><return message="Shipment method not set on order part ${orderId}:${orderPartSeqId}"/></if>


            <iterate list="packageInfoList" entry="packageInfo">
                <!-- Converting Order Data to JSON Request Map -->
                <service-call name="mantle.fedex.FedexServices.get#OrderRequestMap" out-map="request"
                    in-map="[shippingGatewayConfigId:shippingGatewayConfigId,packageInfo:packageInfo,
                    facilityId:orderPart.facilityId,fromPartyId:fromPartyId, toPartyId:toPartyId,
                    postalContactMechId:orderPart.postalContactMechId, orderPart:orderPart]"/>
                <if condition="!request.orderRequestMap"><return/></if>
                <!-- Setting Connection With Fedex -->
                <service-call name="mantle.fedex.FedexServices.send#FedexRequest" out-map="response"
                    in-map="[shippingGatewayConfigId:shippingGatewayConfigId, method:'POST', path:'rate/v1/rates/quotes',
                    contentType:'application/json', requestMap:request.orderRequestMap,
                    apiTokenValue:apiTokenOpt.optionValue, xLocale:'en-US']"/>

                <set field="responseMap" from="response.responseMap"/>
                <set field="orderShippingRates" from="[]"/>
                    <iterate list="responseMap.output.rateReplyDetails" entry="rateServices">
                        <iterate list="rateServices.ratedShipmentDetails" entry="ratedShipmentDetails">
                            <set field="serviceCharge" from="ratedShipmentDetails.totalNetFedExCharge"/>
                        </iterate>
                        <set field="rateServiceMap" from="[serviceName:rateServices.serviceName,serviceCharge:serviceCharge]" type="NewMap"/>
                        <script>
                            orderShippingRates.add(rateServiceMap)
                        </script>
                    </iterate>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="AutoPackageInfo">
        <implements service="mantle.shipment.CarrierServices.get#AutoPackageInfo"/>
        <actions>
            <iterate list="itemInfoList" entry="itemInfoMap">
                <entity-find entity-name="mantle.shipment.ShipmentItemSource" list="shipmentSourceList">
                    <econdition field-name="orderId" from="itemInfoMap.orderId"/>
                </entity-find>
                <iterate list="shipmentSourceList" entry="shipmentSourceMap">
                    <set field="shipmentId" from="shipmentSourceMap.shipmentId"/>
                </iterate>
            </iterate>
            <set field="packageInfoList" from="[]"/>
            <entity-find entity-name="mantle.shipment.ShipmentPackage" list="packageList">
                <econdition field-name="shipmentId"/><order-by field-name="shipmentPackageSeqId"/></entity-find>
            <entity-find entity-name="mantle.shipment.ShipmentPackageContent" list="shipmentPackageContentList">
                <econdition field-name="shipmentId"/><order-by field-name="productId"/></entity-find>
            <iterate list="packageList" entry="pkg">
                <filter-map-list list="shipmentPackageContentList" to-list="curContentList">
                    <field-map field-name="shipmentPackageSeqId" from="pkg.shipmentPackageSeqId"/></filter-map-list>
                <set field="quantityByProductId" from="[:]"/>
                <iterate list="curContentList" entry="curContent"><script>quantityByProductId.put(curContent.productId, curContent.quantity)</script></iterate>

                <script>packageInfoList.add([shipmentBoxTypeId:pkg.shipmentBoxTypeId, weight:pkg.weight,
                    weightUomId:pkg.weightUomId, shipmentPackageSeqId:pkg.shipmentPackageSeqId, quantityByProductId:quantityByProductId])</script>
            </iterate>
        </actions>
    </service>

    <service verb="get" noun="OrderRequestMap">
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="packageInfo" type="Map" required="true"/>
            <parameter name="facilityId" required="true"/>
            <parameter name="postalContactMechId" required="true"/>
            <parameter name="fromPartyId" required="true"/>
            <parameter name="toPartyId" required="true"/>
            <parameter name="orderPart" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="orderRequestMap"/>
        </out-parameters>
        <actions>
            <!-- address_from -->
            <if condition="!facilityId"><return message="Facility not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <service-call name="mantle.facility.ContactServices.get#FacilityDefaultShipOrigin" out-map="facOriginOut"
                    in-map="[facilityId:facilityId]"/>
            <if condition="!facOriginOut.postalContactMechId">
                <return message="Facility ${facilityId} on order part ${orderId}:${orderPartSeqId} has no ship origin address"/>
            </if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                <field-map field-name="contactMechId" from="facOriginOut.postalContactMechId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech">
                <field-map field-name="contactMechId" from="facOriginOut.postalContactMechId"/></entity-find-one>
            <if condition="!originContactMech.trustLevelEnumId">
                <service-call name="mantle.fedex.FedexServices.validate#PostalAddress" out-map="fromValidateOut"
                    in-map="[contactMechId:facOriginOut.postalContactMechId, partyId:fromPartyId, facilityId:facilityId,
                    shippingGatewayConfigId:shippingGatewayConfigId]"/>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="originPostalAddress">
                        <field-map field-name="contactMechId" from="fromValidateOut.contactMechId"/></entity-find-one>
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="originContactMech">
                        <field-map field-name="contactMechId" from="fromValidateOut.contactMechId"/></entity-find-one>
            </if>
            <if condition="!(originContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified'])">
                <return type="danger" message="In get#OrderShippingRate Service, originContactMech is not Valid and Verified"/>
            </if>

            <!-- address_to -->
            <if condition="!postalContactMechId"><return message="Address not set on order part ${orderId}:${orderPartSeqId}"/></if>
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                <field-map field-name="contactMechId" from="postalContactMechId"/></entity-find-one>
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech">
                <field-map field-name="contactMechId" from="destPostalAddress.contactMechId"/></entity-find-one>
            <if condition="!destContactMech.trustLevelEnumId">
                <service-call name="mantle.fedex.FedexServices.validate#PostalAddress" in-map="[contactMechId:postalContactMechId,
                    partyId:toPartyId,shippingGatewayConfigId:shippingGatewayConfigId]" out-map="toValidateOut"/>
                <set field="postalContactMechId" from="toValidateOut.contactMechId"/>
                <set field="orderPart.postalContactMechId" from="postalContactMechId"/>
                <entity-update value-field="orderPart"/>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="destPostalAddress">
                       <field-map field-name="contactMechId" from="postalContactMechId"/></entity-find-one>
                <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="destContactMech">
                       <field-map field-name="contactMechId" from="postalContactMechId"/></entity-find-one>
            </if>
            <if condition="!(destContactMech.trustLevelEnumId in ['CmtlValid', 'CmtlVerified'])">
                <return type="danger" message="In get#OrderShippingRate Service, destContactMech is not Valid and Verified"/>
            </if>

            <!-- Searching Country and State/Province Code -->
            <entity-find-one entity-name="Geo" value-field="originGeoStateProvinceData">
                <field-map field-name="geoId" from="originPostalAddress.stateProvinceGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="originGeoCountryData">
                <field-map field-name="geoId" from="originPostalAddress.countryGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="destGeoStateProvinceData">
                <field-map field-name="geoId" from="destPostalAddress.stateProvinceGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="destGeoCountryData">
                <field-map field-name="geoId" from="destPostalAddress.countryGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>

            <!-- dimensions -->
            <entity-find-one entity-name="mantle.shipment.ShipmentBoxType" value-field="boxType">
                <field-map field-name="shipmentBoxTypeId" from="packageInfo.shipmentBoxTypeId"/></entity-find-one>
            <if condition="boxType == null"><message>Package has no box type, skipping</message><return/></if>
            <if condition="!boxType.boxLength || !boxType.boxWidth || !boxType.boxHeight">
                <message>Box type ${boxType.shipmentBoxTypeId} is missing dimensions (length, width, height) or dimensionUomId, s
                    kipping package</message><return/>
            </if>
            <entity-find-one entity-name="moqui.basic.Uom" value-field="dimensionUom">
                <field-map field-name="uomId" from="boxType.dimensionUomId ?: 'LEN_in'"/></entity-find-one>
            <if condition="!(dimensionUom.abbreviation in ['in', 'cm'])">
                <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} dimension unit is '${distance_unit}',
                must be one of: 'cm', 'in'; skipping package</message>
                <return/>
            </if>
            <!-- weight -->
            <entity-find-one entity-name="moqui.basic.Uom" value-field="weightUom">
                <field-map field-name="uomId" from="packageInfo.weightUomId ?: 'WT_lb'"/></entity-find-one>
            <if condition="!(weightUom.abbreviation in ['lb', 'kg'])">
                <message>Package ${packageInfo_index} box type ${boxType.shipmentBoxTypeId} weight unit is '${mass_unit}',
                must be one of: 'lb', 'kg'; skipping package</message>
                <return/>
            </if>

            <!-- Address details for requestMap -->
            <set field="saddress" from="[streetLines:[originPostalAddress.address1], city:originPostalAddress.city,
                 stateOrProvinceCode:originGeoStateProvinceData.geoCodeAlpha2, postalCode:originPostalAddress.postalCode,
                 countryCode:originGeoCountryData.geoCodeAlpha2]" type="NewMap"/>
            <set field="raddress" from="[streetLines:[destPostalAddress.address1, destPostalAddress.address2],
                 city:destPostalAddress.city, stateOrProvinceCode:destGeoStateProvinceData.geoCodeAlpha2,
                 postalCode:destPostalAddress.postalCode, countryCode:destGeoCountryData.geoCodeAlpha2]" type="NewMap"/>

            <!-- Collecting details for OrderRequestMap -->
            <set field='shipper' from="[address:saddress]" type="NewMap"/>
            <set field='recipient' from="[address:raddress]" type="NewMap"/>
            <set field="weight" from="[units:weightUom.abbreviation=='kg'?'KG':'LB',value:packageInfo.weight]"/>
            <set field="dimensions" from="[length:boxType.boxLength,width:boxType.boxWidth,height:boxType.boxHeight,
                 units:dimensionUom.abbreviation=='in'?'IN':'CM']"/>
            <set field="requestedPackageLineItems" from="[weight:weight,dimensions:dimensions]" type="NewMap"/>
            <set field="rateRequestType" from="['ACCOUNT']"/>
            <set field="requestedShipment" from= "[shipper:shipper, recipient:recipient, pickupType:'DROPOFF_AT_FEDEX_LOCATION',
                 rateRequestType:rateRequestType, requestedPackageLineItems:[requestedPackageLineItems]]" type="NewMap"/>
            <entity-find-one entity-name="ShipmentGatewayFedex" value-field="fedexGtwy">
                <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
            </entity-find-one>
            <set field="accountNumber" from="[value:fedexGtwy.accountNumber]" type="NewMap"/>
            <!-- Creating labelRequestMap -->
            <set field="orderRequestMap" from="[accountNumber:accountNumber, requestedShipment:requestedShipment]" type="NewMap"/>
        </actions>
    </service>
</services>