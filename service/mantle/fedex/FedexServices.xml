<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <!--Default Authentication Service for Main services -->
        <!--Takes Connection Details and returns requestMap-->
        <service verb="set" noun="Connection">
            <in-parameters>
                <parameter name="method"/>
                <parameter name="connectUrl"/>
                <parameter name="contentType"/>
                <parameter name="requestMap" type="Map"/>
                <parameter name="requestPath"/>
                <parameter name="apiTokenValue"/>
            </in-parameters>
            <out-parameters>
                <parameter name="responseMap"/>
            </out-parameters>
            <actions>
                <script><![CDATA[
                      import org.moqui.util.RestClient;
                      import groovy.json.JsonSlurper;
                         def connectUrl=connectUrl;
                         if(!connectUrl.endsWith("/")) {
                            connectUrl+="/";
                         }
                         RestClient restClient = ec.service.rest()
                         restClient.method(method)
                         restClient.uri(connectUrl)
                         restClient.contentType(contentType)
                         if(requestPath!=null && requestPath!="")
                         {
                            restClient.text(requestPath)
                         }
                         if(apiTokenValue!=null)
                         {
                              restClient.addHeader("Authorization", "${apiTokenValue}")
                         }
                         if(requestMap!=null)
                         {
                             restClient.jsonObject(requestMap)
                         }
                         RestClient.RestResponse restResponse = restClient.call()
                         if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                            String errMsg = restResponse.text()
                                ec.logger.error("Fedex error response (${restResponse.statusCode}): ${errMsg}")
                                ec.message.addMessage("Fedex API error")
                                ec.message.addMessage(errMsg)
                                return
                         }
                        responseMap = restResponse.jsonObject()
                     ]]>
                </script>
                <log message="In set#Connection service, returned: ${responseMap}"/>
            </actions>
    </service>
    <!--Default Authentication Service for Main services -->
        <!--Set/Generate new Fedex API Token-->
        <service verb="store" noun="ShipmentGatewayFedex">
            <description>
                Test Credentials Are Predefined so this service is outdated.
            </description>
                 <in-parameters>
                    <!--Adds grantType,clientId, clientSecret and accountNumber-->
                        <auto-parameters entity-name="ShipmentGatewayFedex" include="nonpk">
                            <exclude field-name="lastUpdatedStamp"/>
                        </auto-parameters>
                </in-parameters>
                <out-parameters>
                    <parameter name="shippingGatewayConfigId"/>
                </out-parameters>
                <actions>
                    <entity-find-one entity-name="ShipmentGatewayFedex" value-field="fedexToken">
                        <field-map field-name="shippingGatewayConfigId" value="1"/>
                    </entity-find-one>
                    <set field="shippingGatewayConfigId" value="1"/>
                    <!--Create new token/Update current token-->
                    <if condition="fedexToken==null">
                        <entity-make-value entity-name="ShipmentGatewayFedex" value-field="fedexToken"/>
                        <set field="shippingGatewayConfigId" value="1"/>
                        <set field="fedexToken.shippingGatewayConfigId"/>
                        <set field="fedexToken.grantType"/>
                        <set field="fedexToken.clientId"/>
                        <set field="fedexToken.clientSecret"/>
                        <set field="fedexToken.accountNumber"/>
                        <entity-create value-field="fedexToken"/>
                    </if>
                    <else>
                        <set field="fedexToken.grantType"/>
                        <set field="fedexToken.clientId"/>
                        <set field="fedexToken.clientSecret"/>
                        <set field="fedexToken.accountNumber"/>
                        <entity-update value-field="fedexToken"/>
                    </else>
            </actions>
        </service>

    <!--Validate Postal Address-->
    <service verb="validate" noun="PostalAddress">

        <in-parameters>
            <parameter name="contactMechId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId"/>
            <parameter name="postalAddress"/>
        </out-parameters>
        <actions>

            <!--Searching FedexApiToken-->
            <entity-find-one entity-name="ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="FedexApiToken"/>
            </entity-find-one>
            <if condition="!apiTokenOpt.optionValue">
                <return type="warning" message="Shipping gateway ${shippingGatewayConfigId} has no FedexApiToken, not validating address"/>
            </if>

            <!--Converting Address Data to JSON Request Map-->
            <service-call name="mantle.fedex.FedexServices.get#AddressMap" in-map='[contactMechId:contactMechId, partyId:partyId]'
                          out-map='addressMap'/>
            <if condition="!addressMap"><return/></if>

            <!--Setting Connection With Fedex-->
            <service-call name="mantle.fedex.FedexServices.set#Connection"
                          in-map="[method:'POST',connectUrl:'https://apis-sandbox.fedex.com/address/v1/addresses/resolve',
                                   contentType:'application/json',requestMap:addressMap.requestMap,apiTokenValue:apiTokenOpt.optionValue]"
                          out-map="responseMap"/>
            <log message="In validate#PostalAddress service, returned ${responseMap.responseMap}"/>
            <if condition="responseMap.responseMap==null|| responseMap.responseMap==''">
                <return type="warning" message="In validate#PostalAddress service, response map is empty."/>
            </if>
            <set field="responseMap" from="responseMap.responseMap"/>
            <!--Extracting data from ResponseMap-->
            <set field="resolvedAddresses" from="responseMap.output.resolvedAddresses[0]"/>
<!--        <log message="${resolvedAddresses.streetLinesToken[0]}"/>
            <log message="${resolvedAddresses.city}"/>
            <log message="${resolvedAddresses.stateOrProvinceCode}"/>
            <log message="${resolvedAddresses.postalCode}"/>
            <log message="${resolvedAddresses.countryCode}"/>
            <log message="${resolvedAddresses.customerMessage}"/>
            <log message="${resolvedAddresses.parsedPostalCode}"/>
            <log message="${resolvedAddresses.classification}"/>
            <log message="${resolvedAddresses.postOfficeBox}"/>
            <log message="${resolvedAddresses.normalizedStatusNameDPV}"/>
            <log message="${resolvedAddresses.standardizedStatusNameMatchSource}"/>
            <log message="${resolvedAddresses.resolutionMethodName}"/>
            <log message="${resolvedAddresses.attributes.AddressType}"/>
            <log message="${resolvedAddresses.attributes.InterpolatedStreetAddress}"/>-->

            <!--Verifying Correctness of Address-->
            <set field="trustLevelEnumId" from="(resolvedAddresses.attributes.InterpolatedStreetAddress=='false'&amp;&amp;
                 resolvedAddresses.attributes.AddressType=='STANDARDIZED')? 'CmtlValid' :'CmtlInvalid'"/>
            <log message="In validate#PostalAddress service, trustLevelEnumId: ${trustLevelEnumId}"/>

            <!--Updating trustLevelEnumId value-->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="origContactMech"/>
            <set field="origContactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <entity-update value-field="origContactMech"/>

            <!--Finding stateOrProvinceCode through geoId of countryCode-->
            <entity-find-one entity-name="Geo" value-field="geoCountryData">
                <field-map field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                <field-map field-name="geoCodeAlpha2" from="resolvedAddresses.countryCode"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="GeoAssocAndToDetail" value-field="geoStateData">
                <field-map field-name="geoId" from="geoCountryData.geoId"/>
                <field-map field-name="geoCodeAlpha2" from="resolvedAddresses.stateOrProvinceCode"/>
                <select-field field-name="toGeoId"/>
            </entity-find-one>

            <!--A Section of input parameters of update#PartyPostalAddress Service-->
             <set field="paInMap" from="[contactMechId:contactMechId,address1:resolvedAddresses.streetLinesToken[0],
                         city:resolvedAddresses.city,stateProvinceGeoId:geoStateData.toGeoId,
                         postalCode:resolvedAddresses.postalCode]"/>

            <if condition="partyId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                    <econdition field-name="partyId"/><econdition field-name="contactMechId"/>
                </entity-find>
                <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="paOut"
                              in-map="paInMap + [partyId:partyId, expireCurrent:false, contactMechPurposeId:'PostalShippingDest']"/>
                <log message="In valid#PostalAddress service, contactMechId updated from ${contactMechId} to ${paOut.contactMechId}"/>
                <set field="contactMechId" from="paOut.contactMechId"/>
                <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
            </if>

            <!--Updating trustLevelEnumId value-->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="contactMech"/>
            <set field="contactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <entity-update value-field="contactMech"/>
            <entity-update value-field="postalAddress"/>
        </actions>
    </service>

    <!--Return Address in form of Required Request Map-->
    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="contactMechId"></parameter>
            <parameter name="partyId"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="requestMap" type="Map"/>
        </out-parameters>
        <actions>
            <!--Validating ContactMech Id-->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                <field-map field-name="contactMechId" from="contactMechId"/>
            </entity-find-one>
            <if condition="!postalAddress">
                <return type="danger" message="Invalid Contact Mech ID"/>
            </if>
            <!--Creating Request Map From given Postal Address-->
            <entity-find-one entity-name="Geo" value-field="geoStateData">
                <field-map field-name="geoId" from="postalAddress.stateProvinceGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="geoCountryData">
                <field-map field-name="geoId" from="postalAddress.countryGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <set field="adrs" from="streetLines:[postalAddress.address1],
                                    city:postalAddress.city,
                                    stateOrProvinceCode:geoStateData.geoCodeAlpha2,
                                    countryCode:geoCountryData.geoCodeAlpha2,
                                    postalCode:postalAddress.postalCode" type="NewMap"/>
            <set field="requestMap" from="[addressesToValidate:[[address:adrs]]]" type="NewMap"/>
            <set field="validContactMechId" value="true"/>
            <log message="In get#AddressMap service, returned ${requestMap}=============="/>

        </actions>
    </service>
    <!--RateAndTrasitTime Service-->
    <service verb="get" noun="OrderShippingRate">
        <description>Remove accountNumber tag, it will be automatically added.</description>
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="requestMap" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" required="true"/>
        </out-parameters>
        <actions>

            <!--Searching FedexApiToken-->
            <entity-find-one entity-name="ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="FedexApiToken"/>
            </entity-find-one>
            <if condition="!apiTokenOpt.optionValue">
                <return type="warning"  message="Shipping gateway ${shippingGatewayConfigId} has no FedexApiToken, not getting rates"/>
            </if>

            <!--Setting Connection With Fedex-->
            <service-call name="mantle.fedex.FedexServices.set#Connection"
                          in-map="[method:'POST',connectUrl:'https://apis-sandbox.fedex.com/rate/v1/rates/quotes',
                                   contentType:'application/json',requestMap:requestMap,
                                   apiTokenValue:apiTokenOpt.optionValue,xLocale:'en-US']"
                          out-map="responseMap"/>
            <log message="In get#OrderShippingRate, returned ${responseMap.responseMap}=============="/>
            <set field="responseMap" from="responseMap.responseMap"/>
        </actions>
    </service>
    <!--Request Shipping Label Service-->
    <service verb="request" noun="ShippingLabels">
     </service>
</services>