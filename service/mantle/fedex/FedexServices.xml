<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="set" noun="Connection">
        <in-parameters>
            <parameter name="method"/>
            <parameter name="connectUrl"/>
            <parameter name="contentType"/>
            <parameter name="requestMap" type="Map"/>
            <parameter name="requestPath"/>
            <parameter name="apiTokenType"/>
            <parameter name="apiTokenValue"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap"/>
        </out-parameters>
        <actions>

            <log message="==============Details: ${method}, ${connectUrl} ${contentType} ${requestMap} ${requestPath} ${apiTokenType} ${apiTokenValue}=============="/>
            <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;
                     def connectUrl=connectUrl;
                     RestClient restClient = ec.service.rest()
                     restClient.method(method)
                     restClient.uri(connectUrl)
                     restClient.contentType(contentType)
                     System.out.println(apiTokenValue + " "+apiTokenType)
                     if(requestPath!=null)
                     {
                        restClient.text(requestPath)
                     }
                     if(apiTokenType!=null && apiTokenValue!=null)
                     {
                          restClient.addHeader("Authorization", "${apiTokenType} ${apiTokenValue}")
                     }
                     if(requestMap!=null)
                     {
                         restClient.jsonObject(requestMap)
                     }
                     RestClient.RestResponse restResponse = restClient.call()
                     /*Checking Response Status Code is not verified yet*/
                     if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                        errMsgMap = (Map) new JsonSlurper().parseText(restResponse.text())
                        ec.logger.warn(restResponse.text())
                        return responseMap
                    }
                    /*Storing response of API in responseMap*/
                    responseMap = restResponse.jsonObject()

                 ]]>
            </script>
            <log message="====Response Map: ${responseMap}======="/>
        </actions>

    </service>
    <!--Default Authentication Service for Main services -->
        <!--Getting Fedex API Token by tokenId-->
        <service verb="set" noun="FedexApiToken">
            <in-parameters>
                <parameter name="shippingGatewayConfigId" required="true"/>
            </in-parameters>
            <out-parameters>
                <parameter name="fedexApiToken" required="true"/>
                <parameter name="tokenType" required="true"/>
                <parameter name="accountNumber" required="true"/>
            </out-parameters>
            <actions>

                <!--Searching wether the credentials are available or not.-->
                <entity-find-one entity-name="FedexTokenDetails" value-field="apiTokenDetails">
                    <field-map field-name="tokenId" value="1"/>
                </entity-find-one>

                <!--Return if Details Not Present-->
                <if condition="apiTokenDetails==null">
                    <log message="===============Fedex Access Token Credentials not available.=============="/>
                    <return/>
                </if>
                <log message="==============Get Service: API Found=============="/>
                <set field="requestPath" value="grant_type=${apiTokenDetails.grantType}&amp;client_id=${apiTokenDetails.clientId}&amp;client_secret=${apiTokenDetails.clientSecret}"/>
                <service-call name="mantle.fedex.FedexServices.set#Connection"
                              in-map="[method:'POST',connectUrl:'https://apis-sandbox.fedex.com/oauth/token',
                                       contentType:'application/x-www-form-urlencoded',requestMap:requestMap,requestPath:requestPath]"
                              out-map="responseMap"/>
                <!--Returing fedexApiToken and tokenType-->
                <log message="==================${responseMap.responseMap}=============="/>
                    <set field="responseMap" from="responseMap.responseMap"/>
                <!--<set field="fedexApiToken" from="responseMap.access_token"/>-->
                <entity-find-one entity-name="ShippingGatewayOption" value-field="apiToken">
                    <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                </entity-find-one>
                <if condition="apiToken==null">
                    <log level="warn" message="=========GatewayConfigId not found============"/>
                </if>

                <!--Delete and Create New ShippingGatewayOption-->
                <set field="optionEnumId" from="apiToken.optionEnumId"/>
                <entity-delete value-field="apiToken"/>
                <entity-make-value entity-name="ShippingGatewayOption" value-field="apiToken"/>
                <set field="apiToken.shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                <set field="apiToken.optionEnumId" from="optionEnumId"/>
                <log message="===API Token ${apiToken} ${responseMap.access_token}===="/>
                <set field="apiToken.optionValue" from="responseMap.access_token"/>
                <entity-create value-field="apiToken"/>

                <set field="tokenType" from="responseMap.token_type"/>
                <set field="accountNumber" from="apiTokenDetails.accountNumber"/>
            </actions>
        </service>

    <!--Default Authentication Service for Main services -->
        <!--Set/Generate new Fedex API Token-->
        <service verb="store" noun="FedexTokenDetails">
            <description>
                Test Credentials Are Predefined so this service is outdated.
            </description>
                 <in-parameters>
                <!--Adds grantType,clientId, clientSecret and accountNumber-->
                <auto-parameters entity-name="FedexTokenDetails" include="nonpk">
                        <exclude field-name="lastUpdatedStamp"/>
                    </auto-parameters>
                </in-parameters>
                <out-parameters>
                    <parameter name="tokenId"/>
                </out-parameters>

                <actions>

                    <entity-find-one entity-name="FedexTokenDetails" value-field="fedexTokenDetails">
                        <field-map field-name="tokenId" value="1"/>
                    </entity-find-one>

                <set field="tokenId" value="1"/>

                <!--Create new token/Update current token-->
                  <if condition="fedexTokenDetails==null">
                        <entity-make-value entity-name="FedexTokenDetails" value-field="fedexTokenDetails"/>
                        <set field="tokenId" value="1"/>
                        <set field="fedexTokenDetails.tokenId" from="tokenId"/>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <set field="fedexTokenDetails.accountNumber" from="accountNumber"/>
                        <entity-create value-field="fedexTokenDetails"/>
                    </if>
                    <else>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <set field="fedexTokenDetails.accountNumber" from="accountNumber"/>
                        <entity-update value-field="fedexTokenDetails"/>
                    </else>

                    <!--Store these values in table-->
                <log message="============${tokenId},${grantType},${clientId},${clientSecret},${accountNumber}=============="/>
            </actions>
        </service>

    <!--Validate Postal Address-->
    <service verb="validate" noun="PostalAddress">
        <description>Credentials are required for this service which can be added from
            mantle.fedex.FedexServices.store#FedexTokenDetails.
            Demo ContactMechId="Fedex_Contact_Ivan"
        </description>

        <in-parameters>
            <parameter name="contactMechId" required="true"/>
            <parameter name="partyId" required="true"/>
            <parameter name="shippingGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="responseMap" type="Map"/>
            <parameter name="transactionId"/>
        </out-parameters>
        <actions>

    <!--        &lt;!&ndash;Checking If partyId and ContactMechId are linked&ndash;&gt;
            <entity-find-one entity-name="mantle.party.contact.PartyContactMechInfo" value-field="partyContactMechLink">
                <field-map field-name="contactMechId" from="contactMechId"/>
                <field-map field-name="partyId" from="partyId"/>
            </entity-find-one>
            <if condition="!partyContactMechLink">
                <log message="============PartyContactMech is Not Present=======" level="warn"/>
                <return/>
            </if>-->
            <!--Returns fedexApiToken and tokenType-->
            <log message="==========Ship Config Id: ${shippingGatewayConfigId}========="/>
            <service-call name="mantle.fedex.FedexServices.set#FedexApiToken" in-map='[shippingGatewayConfigId:shippingGatewayConfigId]'
                          out-map='fedexTokenDetails'/>

            <!--Check if Token Credentials Are added or not-->
            <entity-find-one entity-name="ShippingGatewayOption" value-field="apiToken">
                <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
            </entity-find-one>
            <if condition="apiToken==null || apiToken.optionValue==null">
                <log level="error" message="=============Fedex API Token not available.=============="/>
                <return/>
            </if>
            <if condition="fedexTokenDetails==null">
                <log message="=============Fedex Access Token Credentials
                                  not available.=============="/>
                <return/>
            </if>
            <service-call name="mantle.fedex.FedexServices.get#AddressMap"
                          in-map='[contactMechId:contactMechId, partyId:partyId]'
                          out-map='addressMap'/>
            <if condition="!addressMap.validContactMechId"><return/></if>
            <log level="info" message="========API Token Found: ${connectUrl},${apiToken.optionValue}, ${fedexTokenDetails.tokenType},${addressMap.requestMap}========="/>
            <service-call name="mantle.fedex.FedexServices.set#Connection"
                          in-map="[method:'POST',connectUrl:'https://apis-sandbox.fedex.com/address/v1/addresses/resolve',
                                   contentType:'application/json',requestMap:addressMap.requestMap,requestPath:requestPath,
                                   apiTokenType:fedexTokenDetails.tokenType,apiTokenValue:apiToken.optionValue]"
                          out-map="responseMap"/>
            <log message="==============Response Map : ${responseMap}=============="/>
            <log message="==============${responseMap.transactionId}=============="/>
            <!--Through response parameters Set partyContactMechInfo.trustLevelEnumId to true-->
            <!--Extracting Information From Response Map-->
            <set field="transactionId" from="responseMap.transactionId"/>
        </actions>
    </service>

    <!--Return Address in form of Required Request Map-->
    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="contactMechId"></parameter>
            <parameter name="partyId"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="validContactMechId"/>
            <parameter name="requestMap"/>
        </out-parameters>
        <actions>
            <!--Validating ContactMech Id-->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                <field-map field-name="contactMechId" from="contactMechId"/>
            </entity-find-one>
            <if condition="!postalAddress">
                <log message="============Invalid Contact Mech ID=======" level="warn"/>
                <return/>
            </if>
            <!--Creating Request Map From given Postal Address-->
            <entity-find-one entity-name="Geo" value-field="geoStateData">
                <field-map field-name="geoId" from="postalAddress.stateProvinceGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="geoCountryData">
                <field-map field-name="geoId" from="postalAddress.countryGeoId"/>
            </entity-find-one>
            <log message="============Geo Data: ${geoCountryData},${geoCountryData.geoCodeAlpha2}, ${geoCountryData.geoId}=========="/>
            <log message="============Geo Data: ${geoStateData},${geoStateData.geoCodeAlpha2}, ${geoStateData.geoId}=========="/>
            <set field="stateGeoCode" from="geoStateData.geoCodeAlpha2"/>
            <set field="countryGeoCode" from="geoCountryData.geoCodeAlpha2"/>
            <set field="adrs" from="streetLines:[postalAddress.address1],
                                        city:postalAddress.city,
                                        stateOrProvinceCode:stateGeoCode,
                                        countryCode:countryGeoCode,
                                        postalCode:postalAddress.postalCode" type="NewMap"/>
            <set field="requestMap" from="[addressesToValidate:[[address:adrs]]]" type="NewMap"/>
            <set field="validContactMechId" value="true"/>
            <log message="============Request Map: ${requestMap}=============="/>

        </actions>
    </service>
</services>