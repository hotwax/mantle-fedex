<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="validate" noun="PostalAddress">
        <in-parameters>
            <parameter name="shippingGatewayConfigId" required="true"/>
            <parameter name="contactMechId" required="true"/>
            <parameter name="partyId"/>
            <parameter name="facilityId"/>
        </in-parameters>
        <out-parameters>
            <parameter name="contactMechId"/>
            <parameter name="postalAddress"/>
        </out-parameters>
        <actions>
            <!-- Searching FedexApiToken -->
            <entity-find-one entity-name="ShippingGatewayOption" value-field="apiTokenOpt">
                <field-map field-name="shippingGatewayConfigId" from="shippingGatewayConfigId"/>
                <field-map field-name="optionEnumId" value="FedexApiToken"/>
            </entity-find-one>
            <if condition="!apiTokenOpt.optionValue">
                <return type="warning" message=" ${shippingGatewayConfigId} has no FedexApiToken, not validating address"/>
            </if>

            <!-- Converting Address Data to JSON Request Map -->
            <service-call name="mantle.fedex.FedexServices.get#AddressMap" in-map='[contactMechId:contactMechId, partyId:partyId]'
                          out-map='addressMap'/>
            <if condition="!addressMap"><return/></if>

            <!-- Setting Connection With Fedex -->
            <service-call name="mantle.fedex.FedexServices.set#Connection"
                          in-map="[method:'POST', connectUrl:'https://apis-sandbox.fedex.com/address/v1/addresses/resolve',
                    contentType:'application/json', requestMap:addressMap.addressMap,
                    apiTokenValue:apiTokenOpt.optionValue]"
                          out-map="response"/>
            <if condition="response.responseMap==null || response.responseMap == ''">
                <return type="warning" message="In validate#PostalAddress service, response map is empty."/>
            </if>

            <set field="responseMap" from="response.responseMap"/>
            <set field="resolvedAddress" from="responseMap.output.resolvedAddresses[0]"/>

            <!-- Verifying Correctness of Address -->
            <set field="trustLevelEnumId" from="(resolvedAddress.attributes.InterpolatedStreetAddress=='false' &amp;&amp;
                 resolvedAddress.attributes.AddressType=='STANDARDIZED')? 'CmtlValid' :'CmtlInvalid'"/>

            <!-- Updating trustLevelEnumId value -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="origContactMech"/>
            <set field="origContactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <entity-update value-field="origContactMech"/>

            <!-- Searching Country and State/Province Code -->
            <entity-find-one entity-name="Geo" value-field="resolvedAddress.geoCountryData">
                <field-map field-name="geoTypeEnumId" value="GEOT_COUNTRY"/>
                <field-map field-name="geoCodeAlpha2" from="resolvedAddress.countryCode"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="GeoAssocAndToDetail" value-field="resolvedAddress.geoStateData">
                <field-map field-name="geoId" from="resolvedAddress.geoCountryData.geoId"/>
                <field-map field-name="geoCodeAlpha2" from="resolvedAddress.stateOrProvinceCode"/>
                <select-field field-name="toGeoId"/>
            </entity-find-one>

            <!-- A Section of input parameters of update#PartyPostalAddress Service -->
            <set field="paInMap" from="[contactMechId:contactMechId,address1:resolvedAddress.streetLinesToken[0],
                         city:resolvedAddress.city,stateProvinceGeoId:resolvedAddress.geoStateData.toGeoId,
                         postalCode:resolvedAddress.postalCode]"/>

            <if condition="facilityId">
                <entity-find entity-name="mantle.facility.FacilityContactMech" list="origFcmList">
                    <econdition field-name="facilityId"/><econdition field-name="contactMechId"/>
                </entity-find>

                <!-- Update FacilityPostalAddress, if Facility linked with contactMech -->
                <if condition="origFcmList">
                    <service-call name="mantle.facility.ContactServices.update#FacilityPostalAddress" out-map="paOut"
                                  in-map="paInMap + [facilityId:facilityId, expireCurrent:true]"/>
                    <log message="FacilityContactMechId updated from ${contactMechId} to ${paOut.contactMechId}"/>
                    <set field="contactMechId" from="paOut.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                </if>
                <else>
                    <log level="warn" message="In validate#PostalAddress service, Facility not associated with ContactMech"/>
                </else>
            </if>
            <else-if condition="partyId">
                <entity-find entity-name="mantle.party.contact.PartyContactMech" list="origPcmList">
                    <econdition field-name="partyId"/><econdition field-name="contactMechId"/>
                </entity-find>

                <!-- Update PartyPostalAddress, if Party linked with contactMech -->
                <if condition="origPcmList">
                    <service-call name="mantle.party.ContactServices.update#PartyPostalAddress" out-map="paOut"
                                  in-map="paInMap + [partyId:partyId, expireCurrent:false, contactMechPurposeId:'PostalShippingDest']"/>
                    <log message="PartyContactMechId updated from ${contactMechId} to ${paOut.contactMechId}"/>
                    <set field="contactMechId" from="paOut.contactMechId"/>
                    <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress"/>
                </if>
                <else>
                    <log level="warn" message="In validate#PostalAddress service, Party not associated with ContactMech"/>
                </else>
            </else-if>
            <else>
                <return type="danger" message="In validate#PostalAddress service, both partyId and facilityId are not avaliable."/>
            </else>

            <!-- Updating trustLevelEnumId value -->
            <entity-find-one entity-name="mantle.party.contact.ContactMech" value-field="contactMech"/>
            <set field="contactMech.trustLevelEnumId" from="trustLevelEnumId"/>
            <entity-update value-field="contactMech"/>
            <entity-update value-field="postalAddress"/>
        </actions>
    </service>

    <!-- Returns RequestMap for validate#PostalAddress service -->
    <service verb="get" noun="AddressMap">
        <in-parameters>
            <parameter name="contactMechId"></parameter>
            <parameter name="partyId"></parameter>
        </in-parameters>
        <out-parameters>
            <parameter name="addressMap" type="Map"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="mantle.party.contact.PartyContactMech" value-field="partyContactMech">
                <field-map field-name="contactMechId" from="contactMechId"/>
                <field-map field-name="contactMechId" from="contactMechId"/>
            </entity-find-one>

            <!-- Searching PostalAddress -->
            <entity-find-one entity-name="mantle.party.contact.PostalAddress" value-field="postalAddress">
                <field-map field-name="contactMechId" from="contactMechId"/>
            </entity-find-one>
            <if condition="!postalAddress">
                <return type="danger" message="In get#AddressMap service, postal address not found."/>
            </if>

            <!-- Searching Country and State/Province Code -->
            <entity-find-one entity-name="Geo" value-field="geoStateData">
                <field-map field-name="geoId" from="postalAddress.stateProvinceGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>
            <entity-find-one entity-name="Geo" value-field="geoCountryData">
                <field-map field-name="geoId" from="postalAddress.countryGeoId"/>
                <select-field field-name="geoCodeAlpha2"/>
            </entity-find-one>

            <!-- Creating AddressMap -->
            <set field="adrs" from="streetLines:[postalAddress.address1],
                                    city:postalAddress.city,
                                    stateOrProvinceCode:geoStateData.geoCodeAlpha2,
                                    countryCode:geoCountryData.geoCodeAlpha2,
                                    postalCode:postalAddress.postalCode" type="NewMap"/>
            <set field="addressMap" from="[addressesToValidate:[[address:adrs]]]" type="NewMap"/>
            <set field="validContactMechId" value="true"/>

        </actions>
    </service>
</services>