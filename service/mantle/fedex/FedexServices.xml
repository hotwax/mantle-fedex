<?xml version="1.0" encoding="UTF-8"?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

        <!--Validate Postal Address-->
        <service verb="validate" noun="PostalAddress">
            <description>Credentials are required for this service which can be added from
                mantle.fedex.FedexServices.store#FedexTokenDetails.</description>
            <in-parameters>
                <parameter name="requestMap" required="true"/>
            </in-parameters>
            <out-parameters>
                <parameter name="responseMap"/>
            </out-parameters>
            <actions>
                <log message="============${requestMap}=============="/>

                <!--Hard Coded Url-->
                <set field="connectUrl" value="https://apis-sandbox.fedex.com/address/v1/addresses/resolve"/>

                <!--Returns fedexApiToken and tokenType-->
                <service-call name="mantle.fedex.FedexServices.get#FedexApiToken" out-map="fedexTokenDetails"/>

                <!--Check if Token Credentials Are added or not-->
                <if condition="fedexTokenDetails==null">
                    <log message="=============Fedex Access Token Credentials
                                  not available.=============="/>
                    <return/>
                </if>
                <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;

                     def connectUrl=connectUrl;
                     RestClient restClient = ec.service.rest()
                     restClient.method("POST")
                     restClient.uri(connectUrl)
                     restClient.contentType("application/json")
                     restClient.addHeader("Authorization", "${fedexTokenDetails.tokenType} ${fedexTokenDetails.fedexApiToken}")
                     restClient.addHeader("Content-Type", "application/json")
                     restClient.jsonObject(requestMap)
                     RestClient.RestResponse restResponse = restClient.call()

                     /*Checking Response Code is not verified yet*/
                     if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                        errMsgMap = (Map) new JsonSlurper().parseText(restResponse.text())
                        ec.logger.warn(restResponse.text())
                        return responseMap
                    }

                    /*Storing response of API in responseMap*/
                    responseMap = restResponse.jsonObject()
            ]]></script>
            <log message="==============${responseMap}=============="/>
            </actions>
        </service>

        <!--Getting Fedex API Token by tokenId-->
        <service verb="get" noun="FedexApiToken">
            <out-parameters>
                <parameter name="fedexApiToken" required="true"/>
                <parameter name="tokenType" required="true"/>
            </out-parameters>
            <actions>

                <!--Searching wether the credentials are already available or not.-->
                <entity-find-one entity-name="FedexTokenDetails" value-field="apiTokenDetails">
                    <field-map field-name="tokenId" value="1"/>
                </entity-find-one>

                <!--Return if Details Not Present-->
                <if condition="apiTokenDetails==null">
                    <log message="===============Fedex Access Token Credentials not available.=============="/>
                    <return/>
                </if>

                <!--Hard Coded Url-->
                <log message="==============API Found=============="/>
                <set field="connectUrl" value="https://apis-sandbox.fedex.com/oauth/token"/>

                <!--request Path has Context Type:"application/x-www-form-urlencoded"-->
                <set field="requestPath" value="grant_type=${apiTokenDetails.grantType}&amp;client_id=${apiTokenDetails.clientId}&amp;client_secret=${apiTokenDetails.clientSecret}"/>

                <script><![CDATA[
                  import org.moqui.util.RestClient;
                  import groovy.json.JsonSlurper;

                     def connectUrl=connectUrl;
                     RestClient restClient = ec.service.rest()
                     restClient.method("POST")
                     restClient.uri(connectUrl)
                     ec.logger.info("==========${connectUrl}==============")
                        ec.logger.info("==========${requestPath}==============")
                     restClient.contentType("application/x-www-form-urlencoded")
                     restClient.text(requestPath)
                     RestClient.RestResponse restResponse = restClient.call()

                     /*Checking Response Status Code is not verified yet*/
                     if (restResponse.statusCode < 200 || restResponse.statusCode > 300) {
                        errMsgMap = (Map) new JsonSlurper().parseText(restResponse.text())
                        ec.logger.warn(restResponse.text())
                        return responseMap
                    }

                    /*Storing response of API in responseMap*/
                    responseMap = restResponse.jsonObject()
                 ]]>
                </script>

                <!--Returing fedexApiToken and tokenType-->
                <log message="==================${responseMap}=============="/>
                <set field="fedexApiToken" from="responseMap.access_token"/>
                <set field="tokenType" from="responseMap.token_type"/>
            </actions>
        </service>

        <!--Set/Generate new Fedex API Token-->
        <service verb="store" noun="FedexTokenDetails">
            <description>Test Credentails are:
                        1)grantType=client_credentials
                        2)clientId=l7ea8c805cbc744ac2aba322fbc2150d81
                        3)clientSecret=8551e10d476549e4a09c522d70e51915
            </description>
                 <in-parameters>
                    <!--Adds grantType,clientId and clientSecret-->
                    <auto-parameters required="true" entity-name="FedexTokenDetails" include="nonpk">
                        <exclude field-name="lastUpdatedStamp"/>
                    </auto-parameters>
                </in-parameters>
                <out-parameters>
                    <parameter name="tokenId"/>
                </out-parameters>

                <actions>

                    <!--Setting AccessTtext-longoken Record in fedexTokenDetails entity-->
                    <entity-find-one entity-name="FedexTokenDetails" value-field="fedexTokenDetails">
                        <field-map field-name="tokenId" value="1"/>
                    </entity-find-one>

                    <set field="tokenId" value="1"/>
                    <if condition="fedexTokenDetails==null">
                        <entity-make-value entity-name="FedexTokenDetails" value-field="fedexTokenDetails"/>
                        <set field="tokenId" value="1"/>
                        <set field="fedexTokenDetails.tokenId" from="tokenId"/>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <entity-create value-field="fedexTokenDetails"/>
                    </if>
                    <else>
                        <set field="fedexTokenDetails.grantType" from="grantType"/>
                        <set field="fedexTokenDetails.clientId" from="clientId"/>
                        <set field="fedexTokenDetails.clientSecret" from="clientSecret"/>
                        <entity-update value-field="fedexTokenDetails"/>
                    </else>

                    <!--          <set field="fedexTokenDetails.fedexApiToken" from="responseMap.access_token"/>
                              <set field="fedexTokenDetails.tokenType" from="responseMap.token_type"/>-->

                    <!--Store these values in table-->
                    <log message="============${tokenId},${grantType},${clientId},${clientSecret}=============="/>
            </actions>
        </service>
</services>

